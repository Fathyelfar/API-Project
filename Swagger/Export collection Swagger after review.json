{
	"info": {
		"_postman_id": "04931cc7-ba82-42ba-8233-c028a4c1fed8",
		"name": "Part 1 Swagger",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22657833"
	},
	"item": [
		{
			"name": "Test case 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test case 1\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Relative test cases\r",
							"pm.test(\"Confirm the keys (id and idBook and firstName and lastName) exist\", function () {\r",
							"pm.collectionVariables.get(\"id\",\"idBook\",\"firstName\",\"lastName\");\r",
							"});\r",
							"\r",
							"\r",
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/api/v1/Authors",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test case 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test case 2\r",
							"\r",
							"pm.test(\"The status code is 400 because the first name and last name are missing.\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"//Relative test case\r",
							"\r",
							"pm.sendRequest(\"{{BaseUrl}}/api/v1/Authors\", function (err, response) {\r",
							"    pm.test(\"Validate the type = https://tools.ietf.org/html/rfc7231#section-6.5.1 \")\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.type).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
							"});\r",
							"\r",
							"//Relative test case \r",
							"\r",
							" pm.sendRequest(\"{{BaseUrl}}/api/v1/Authors\", function (err, response) {\r",
							"pm.test(\"Validate the title = One or more validation errors occurred.\")\r",
							"    var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.title).to.eql(\"One or more validation errors occurred.\");\r",
							"});\r",
							"\r",
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"id\": 1,\r\n        \"idBook\": 1\r\n        //\"firstName\": \"\" ,\r\n       // \"lastName\": \"\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/api/v1/Authors",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test case 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test case 3\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Relative test case \r",
							"\r",
							"pm.test(\"Response size is between 50 ,180\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.within(50,180);\r",
							"});\r",
							"\r",
							"// Relative test case\r",
							"pm.test(\"Validate the idBook=1\", function () {\r",
							"    pm.expect(pm.response.text(\"idBook\")).to.include(1);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/api/v1/Authors/authors/books/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"authors",
						"books",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test case 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test case 4\r",
							"pm.test(\"Validate the value of the first name for id1 = First Name 1\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"First Name 1\");\r",
							"});\r",
							"\r",
							"//Relative test case \r",
							"\r",
							"pm.test(\"Validate the value of the id =1\", function () {\r",
							"    pm.expect(pm.response.text(\"id\")).to.include(1);\r",
							"});\r",
							"\r",
							"//Relative test case \r",
							"\r",
							"pm.test(\"Validate the value of the idBook = 1\", function () {\r",
							"    pm.expect(pm.response.text(\"idBook\")).to.include(1);\r",
							"});\r",
							"\r",
							"// Relative test case \r",
							"\r",
							"pm.test(\"Validate the value of the last name for id1 = last Name 1\", function () {\r",
							"    pm.expect(pm.response.text(\"lastName\")).to.include(\"Last Name 1\");\r",
							"});\r",
							"\r",
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/api/v1/Authors/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test case 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Case 5\r",
							"pm.test(\"Validate the value of last name changed to Last Name 12\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Last Name 12\");\r",
							"});\r",
							"\r",
							"//Relative test case \r",
							"\r",
							"pm.test(\"Validate the value of the firstName = First Name 12\", function () {\r",
							"    pm.expect(pm.response.text(\"firstName\")).to.include(\"First Name 12\");\r",
							"});\r",
							"\r",
							"\r",
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 2,\r\n    \"idBook\": 1,\r\n    \"firstName\": \"First Name 12\",\r\n    \"lastName\": \"Last Name 12\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/api/v1/Authors/2",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test case 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test case 6\r",
							"pm.test(\"Validate that the body of the deleted request is empty.\", function () {\r",
							"pm.expect(pm.response.text()).to.include(\"\");\r",
							"});\r",
							"\r",
							"// Relative test case\r",
							"\r",
							"pm.test(\"Status code name has string (OK)\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Delay Time 1000ms\r",
							"setTimeout(function(){},[1000]);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/api/v1/Authors/1",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Authors",
						"1"
					]
				}
			},
			"response": []
		}
	]
}